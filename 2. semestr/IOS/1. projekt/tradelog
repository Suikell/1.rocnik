#!/bin/sh

##
 # tradelog
 # Řešení IOS-DU1, 27.3.2020
 # Autor: Iveta Snášelová, FIT
 # Popis: Analyzátor logů z obchodování na burze
##

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

#-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače.
#e[_m - slouží k formátování
print_help() {

  printf "\e[1mJMÉNO\n"

  printf "\t tradelog \e[0m -"
  printf "analyzátor logů z obchodování na burze\n\n"

  printf "\e[1mPOUŽITÍ\n\t "
  printf "tradelog\e[0m [\e[1m-h|--help\e[0m] [\e[4mFILTR\e[0m] [\e[4mPŘÍKAZ\e[0m] [\e[4mLOG [LOG2 [...]\e[0m]\n\n"

  printf "\e[1mPOUŽITÍ\n\t"
  printf "Tradelog\e[0m filtruje záznamy z nástroje pro obchodování na burze. Pokud \n\tje \e[1mtradelogu\e[0m zadán také příkaz, nad filtrovanými záznamy daný \n\tpříkaz provede.\n\n"

  printf "\e[1mVOLBY\e[0m\n"

  printf "\t \e[1mPŘÍKAZ\e[0m\e[2m - může být právě jeden\e[0m\n\n"

  printf "\t\t [\e[4mlist-tick\e[0m] \t"
  printf "výpis seznamu vyskytujících se burzovních \n\t\t\t\tsymbolů, tzv. “tickerů”\n\n"

  printf "\t\t [\e[4mprofit\e[0m] \t"
  printf "výpis celkového zisku z uzavřených pozic.\n\n"

  printf "\t\t [\e[4mpos\e[0m] \t\t"
  printf "výpis hodnot aktuálně držených pozic \n\t\t\t\tseřazených sestupně dle hodnoty.\n\n"

  printf "\t\t [\e[4mlast-price\e[0m] \t"
  printf "výpis poslední známé ceny pro každý ticker.\n\n"

  printf "\t\t [\e[4mhist-ord\e[0m] \t"
  printf "výpis histogramu počtu transakcí dle tickeru.\n\n"

  printf "\t\t [\e[4mgraph-pos\e[0m] \t"
  printf "výpis grafu hodnot držených pozic dle tickeru.\n\n"

  printf "\n\t \e[1mFILTR\e[0m\e[2m -může být kombinace\e[0m\n\n"

  printf "\t\t \e[1m-a\e[0m \e[4mDATETIME\e[0m \t"
  printf "after: jsou uvažovány pouze záznamy PO tomto \n\t\t\t\tdatu (bez tohoto data). DATETIME je formátu \n\t\t\t\tYYYY-MM-DD HH:MM:SS.\n\n"

  printf "\t\t \e[1m-b\e[0m \e[4mDATETIME\e[0m \t"
  printf "before: jsou uvažovány pouze záznamy PŘED tímto \n\t\t\t\tdatem (bez tohoto data).\n\n"

  printf "\t\t \e[1m-t\e[0m \e[4mTICKER\e[0m \t"
  printf "jsou uvažovány pouze záznamy odpovídající danému\n\t\t\t\ttickeru. Při více výskytech přepínače se bere \n\t\t\t\tmnožina všech uvedených tickerů.\n\n"

  printf "\t\t \e[1m-w\e[0m \e[4mWIDTH\e[0m \t"
  printf "u výpisu grafů nastavuje jejich šířku, tedy \n\t\t\t\tdélku nejdelšího řádku na WIDTH. Tedy, WIDTH \n\t\t\t\tmusí být kladné celé číslo. Více výskytů \n\t\t\t\tpřepínače je chybné spuštění.\n\n"

}

#deklarace proměnných
COMMAND=""
LOG_FILES=""
LOG_FILES_GZ=""
READ_INPUT=""
WIDTH=1
CHECK_WIDTH=0

#spracování parametrů
#while běží, dokud máme nějaké parametry
while [ "$#" -gt 0 ]; do
  case "$1" in
  list-tick | profit | pos | last-price | hist-ord | graph-pos)   #příkaz může být právě jeden
    COMMAND="$1"
    shift #první argument zahodí -> jako první bude druhý
    ;;
  -a)
    DATETIME_AFTER="$2"
    shift #přiřazuji hodnotu až za argumentem => musím shift 2x
    shift
    ;;
  -b)
    DATETIME_BEFORE="$2"
    shift
    shift
    ;;
  -t)
    TICKER="$2;$TICKER" #Ticker může být zadán vícekrát
    shift
    shift
    ;;
  -w) #-w WIDTH
    if [ "$CHECK_WIDTH" = 1 ]; then #kontrola, jestli přepínač nebyl již zadání
      printf "Error: Přepínač -w může být zadán pouze jednou!\n" >&2
      exit 1
    fi
    WIDTH="$2"
    CHECK_WIDTH=1
    if [ "$WIDTH" -lt 0 ]; then #kontrola kladného čísla
      printf "Error: -w nemůže být záporné číslo!\n" >&2
      exit 1
    fi
    shift
    shift
    ;;
  -h | --help)
    print_help
    exit 0  #po použití nápověd skript končí
    ;;
  *.gz)
    LOG_FILES_GZ="$1 $LOG_FILES_GZ"
    shift
    ;;
  *.log)
    LOG_FILES="$1 $LOG_FILES"
    shift
    ;;
  *)
    printf "Error: Nesprávný argument, použijte \"./tradelog -h/--help\" k zobrazení nápovědy\n" >&2
    exit 1
    shift
    ;;
  esac
done

#načtení vstupu a uložení do proměnné
if [ "$LOG_FILES_GZ" != "" ]; then
  READ_INPUT=$(gzip -d -c $LOG_FILES_GZ | cat - $LOG_FILES)
elif [ "$LOG_FILES" != "" ]; then
  READ_INPUT=$(cat $LOG_FILES)
else
  READ_INPUT=$(cat)
fi

#vyfiltrování vstupu dle přepínačů
if [ "$DATETIME_AFTER" != "" ]; then
  READ_INPUT=$(echo "$READ_INPUT" | awk -F ';' -v d="$DATETIME_AFTER" '{if($1 > d) printf $0 "\n"}')
fi
if [ "$DATETIME_BEFORE" != "" ];then #pos a graph-pos nesedí???
  READ_INPUT=$(echo "$READ_INPUT" | awk -F ';' -v d="$DATETIME_BEFORE" '{if($1 < d) printf $0 "\n"}')
fi
if [ "$TICKER" != "" ];then
  READ_INPUT=$(echo "$READ_INPUT" | awk -v tick="$TICKER" -F ';' 'tick ~ $2";" {printf $0 "\n"}')
fi

#příkazy
if [ "$COMMAND" = "list-tick" ]; then
  echo "$READ_INPUT" | awk -F';' '{ printf $2 "\n" }' | sort | uniq

elif [ "$COMMAND" = "profit" ]; then # suma hodnot sell transakcí - suma hodnot buy transakcí.
  echo "$READ_INPUT" | awk -F';' -v total=0 '{
  if($3 == "sell") TOTAL += ($4 * $6);
  else TOTAL -= ($4 * $6) }
  END { printf "%.2f\n",TOTAL}'

elif [ "$COMMAND" = "pos" ] || [ "$COMMAND" = "graph-pos" ]; then
  #začátek pro pos i graph-pos je stejný - uložení: počet držených jednotek * jednotková cena z poslední transakce
  pos=$(echo "$READ_INPUT" | awk -F';' '$2 { b[$2]=$4; if($3 == "buy") a[$2]+=$6; else a[$2]-=$6 }
  END{for (i in a) { printf i; printf ":%.2f\n", (a[i]*b[i])}}' | sort -t: -n -k2 -r)

  #výpočet nejdelšího čísla znakově kvůli zarovnání
  MAX_SPACE=$(echo "$pos" | awk -F ':' -v max=0 '{if(length($2) > max) max=length($2)} END {printf max"\n"}')

  #tisk pos
  if [ "$COMMAND" = "pos" ]; then
    echo "$pos" | awk -F':' -v max="$MAX_SPACE" '{ printf("%-10s: %*.2f\n", $1, max, $2)}'

  #tisk graph-pos
  else
    #určení max řádku kvůli width
    MAX=$(echo "$pos" | awk -F':' -v max=0 '{ if(NR==1) max = $2 }
    END {if(max > (-$2)) printf max; else printf "%.2f", (-$2)}')


    echo "$pos" | awk -F':' -v w="$WIDTH" -v max="$MAX" '{

     help=$2
     if(help > 0) neg=0; else {neg=1; help=-help }      #číslo +/- ? A převod čísla na kladné
     if(w == 1) help=help/1000;                         #width není zadáno
     else if(help == max) help=w+1                      #nejdelší řádek tisknul o 1 znak míň (+1)
     else help=(help*w/max)                             #výpočet délky ostatních řádků
     printf("%-10s:", $1)
     if(help >= 1)                                      #pokud žádný znak, tak mezeru netiskneme
        printf " "

     for(i=1; i<help; i++)                              #tisk znaku #/!
     {
        if(neg==0) printf "#";
        else printf "!";
     }
     printf "\n"
    }'| sort
  fi
elif [ "$COMMAND" = "last-price" ]; then
  #výpočet last-price
  FORMAT=$(echo "$READ_INPUT" | awk -F';' '$2 { a[$2]=$4 } END{for (i in a) { printf "%s:%.2f\n", i,a[i]}}' | sort)
  #zjištění znakově nejdelšímu řádku kvůli zarovnání
  MAX=$(echo "$FORMAT" | awk -F ':' -v max=0 '{if(length($2) > max) max=length($2)} END {printf max"\n"}')
  #tisk last-price
  echo "$FORMAT" | awk -F':' -v max="$MAX" '{ printf("%-10s: %*.2f\n", $1, max, $2)}'

elif [ "$COMMAND" = "hist-ord" ]; then
  #výpočet výskytů tickerů
  MAX=$(echo "$READ_INPUT" | sort -t ';' -k 2,2 | awk -F';' '$2 {a[$2]++}
  END {
    for(i in a) {
    printf("%s:",i)
     printf a[i]
      printf("\n")
    }
  }' | sort -t: -n -k2 -r)
  #převod čísla na #
  echo "$MAX" | awk -F':' -v w="$WIDTH" '{
  if(NR==1) max=$2;                               #max hodnota
  if(w != 1) help=($2*w/max); else help=$2;       #výpočet kolik je potřeba vypsat #
  printf("%-10s:", $1)
  if(help >= 1)                                   #kontrola mezery
    printf " "
  for(i=0; i<help; i++)
    printf "#"
  printf "\n"
  }' | sort

else
  #při žádném příkazu jen vypíše na stdout
  echo "$READ_INPUT"
fi

exit 0